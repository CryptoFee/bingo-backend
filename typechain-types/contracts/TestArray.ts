/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace TestArray {
  export type PlayerStruct = {
    playerAddress: PromiseOrValue<string>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
  };

  export type PlayerStructOutput = [string, BigNumber, BigNumber] & {
    playerAddress: string;
    start: BigNumber;
    end: BigNumber;
  };
}

export interface TestArrayInterface extends utils.Interface {
  functions: {
    "addPlayer((address,uint256,uint256)[])": FunctionFragment;
    "receivePlayersAndPickWinner(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addPlayer" | "receivePlayersAndPickWinner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPlayer",
    values: [TestArray.PlayerStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePlayersAndPickWinner",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: "addPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivePlayersAndPickWinner",
    data: BytesLike
  ): Result;

  events: {
    "Winners()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Winners"): EventFragment;
}

export interface WinnersEventObject {}
export type WinnersEvent = TypedEvent<[], WinnersEventObject>;

export type WinnersEventFilter = TypedEventFilter<WinnersEvent>;

export interface TestArray extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestArrayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPlayer(
      playersData: TestArray.PlayerStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receivePlayersAndPickWinner(
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPlayer(
    playersData: TestArray.PlayerStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receivePlayersAndPickWinner(
    _randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPlayer(
      playersData: TestArray.PlayerStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    receivePlayersAndPickWinner(
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Winners()"(): WinnersEventFilter;
    Winners(): WinnersEventFilter;
  };

  estimateGas: {
    addPlayer(
      playersData: TestArray.PlayerStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receivePlayersAndPickWinner(
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPlayer(
      playersData: TestArray.PlayerStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receivePlayersAndPickWinner(
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
