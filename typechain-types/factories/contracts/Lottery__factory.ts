/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Lottery, LotteryInterface } from "../../contracts/Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdtTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_maxPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_prizes",
        type: "uint256[]",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "coordinator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NewPlayer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ResetGame",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct Lottery.LuckyPlayer[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "Winners",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "buyLotteryTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61014060405260006004553480156200001757600080fd5b506040516200147c3803806200147c8339810160408190526200003a91620002ae565b6001600160a01b0382166080528282823380600081620000a15760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000d457620000d48162000151565b5050506001600160a01b0391821660a0526001600160401b039290921660c0526002919091553360e052610100869052600380546001600160a01b031916918816919091179055835162000130906005906020870190620001fc565b506101f480861015620001405750845b6101205250620003c5945050505050565b336001600160a01b03821603620001ab5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000098565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8280548282559060005260206000209081019282156200023a579160200282015b828111156200023a5782518255916020019190600101906200021d565b50620002489291506200024c565b5090565b5b808211156200024857600081556001016200024d565b80516001600160a01b03811681146200027b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80516001600160401b03811681146200027b57600080fd5b60008060008060008060c08789031215620002c857600080fd5b620002d38762000263565b60208881015160408a01519298509650906001600160401b0380821115620002fa57600080fd5b818a0191508a601f8301126200030f57600080fd5b81518181111562000324576200032462000280565b8060051b604051601f19603f830116810181811085821117156200034c576200034c62000280565b60405291825284820192508381018501918d8311156200036b57600080fd5b938501935b828510156200038b5784518452938501939285019262000370565b809950505050505050620003a26060880162000296565b9250620003b26080880162000263565b915060a087015190509295509295509295565b60805160a05160c05160e051610100516101205161104b6200043160003960006102a80152600081816103240152818161051601526109160152600081816101940152610b9e015260006106a2015260006106e80152600081816101070152610149015261104b6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631fe543e3146100675780634f2f35191461007c57806379ba50971461008f5780638da5cb5b14610097578063f2fde38b146100c0578063f71d96cb146100d3575b600080fd5b61007a610075366004610c8e565b6100fc565b005b61007a61008a366004610d6f565b610189565b61007a610560565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61007a6100ce366004610d99565b61060a565b6100a46100e1366004610dbb565b6008602052600090815260409020546001600160a01b031681565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461017b5760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b610185828261061e565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102195760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c60448201526e103a3434b990333ab731ba34b7b71760891b6064820152608401610172565b60075460ff161561027f5760405162461bcd60e51b815260206004820152602a60248201527f436f6e7472616374206973206c6f636b65642c2077616974696e6720666f72206044820152693932b9bab63a3997171760b11b6064820152608401610172565b6006600061028e82600a610ed0565b6102989084610ef5565b9050806001111580156102cb57507f00000000000000000000000000000000000000000000000000000000000000008111155b6103225760405162461bcd60e51b815260206004820152602260248201527f54686520616d6f756e7420657863656564656420746865206d617820616d6f756044820152611b9d60f21b6064820152608401610172565b7f0000000000000000000000000000000000000000000000000000000000000000816004546103519190610f09565b11156103ad5760405162461bcd60e51b815260206004820152602560248201527f54686520616d6f756e7420697320746f6f206d75636820666f722074686973206044820152646379636c6560d81b6064820152608401610172565b6003546040516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201869052909116906323b872dd906064016020604051808303816000875af1158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190610f1c565b61046e5760405162461bcd60e51b81526020600482015260156024820152742aa9a22a103a3930b739b332b9103330b4b632b21760591b6044820152606401610172565b60015b8181116104d157846008600060046000815461048c90610f3e565b91829055508152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055806104c981610f3e565b915050610471565b50604080516001600160a01b0386168152602081018590527f6b8fe0f067804a78a12efa88b8428446c8d8a703d5604dffc63ac27fcbdcfd0d910160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006004540361055a576007805460ff1916600117905560055461055690610675565b6006555b50505050565b6001546001600160a01b031633146105b35760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b6044820152606401610172565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610612610766565b61061b816107bb565b50565b81600654146106645760405162461bcd60e51b815260206004820152601260248201527172657175657374206e6f7420666f756e642160701b6044820152606401610172565b61066c610864565b61018581610899565b600061067f610766565b6002546040516305d3b1d360e41b8152600481019190915267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015260036044820152620186a0606482015263ffffffff831660848201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a4016020604051808303816000875af1158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d9190610f57565b9150505b919050565b6000546001600160a01b031633146107b95760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b6044820152606401610172565b565b336001600160a01b038216036108135760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610172565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000600481905560068190556040517fc41db7bf93b2ffacecac5d21bb880bf7435f8e756b583a2434d667ebd52516d69190a1565b60055460009067ffffffffffffffff8111156108b7576108b7610c78565b6040519080825280602002602001820160405280156108fc57816020015b60408051808201909152600080825260208201528152602001906001900390816108d55790505b50905060005b60055463ffffffff82161015610adf5760007f0000000000000000000000000000000000000000000000000000000000000000848363ffffffff168151811061094d5761094d610f70565b602002602001015161095f9190610f86565b600081815260086020526040902054600354600580549394506001600160a01b0392831693929091169163a9059cbb91849163ffffffff88169081106109a7576109a7610f70565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a229190610f1c565b610a665760405162461bcd60e51b81526020600482015260156024820152742aa9a22a103a3930b739b332b9103330b4b632b21760591b6044820152606401610172565b6040518060400160405280826001600160a01b0316815260200160058563ffffffff1681548110610a9957610a99610f70565b9060005260206000200154815250848463ffffffff1681518110610abf57610abf610f70565b602002602001018190525050508080610ad790610f9a565b915050610902565b507f91bc3922e592c1a361b69a1521df2f97ca2f5b15db407fe1f90a8c95bf7738b681604051610b0f9190610fbd565b60405180910390a16003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190610f57565b60035460405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190610f1c565b610c695760405162461bcd60e51b815260206004820152601e60248201527f55534454207472616e7366657220746f206f776e6572206661696c65642e00006044820152606401610172565b50506007805460ff1916905550565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610ca157600080fd5b8235915060208084013567ffffffffffffffff80821115610cc157600080fd5b818601915086601f830112610cd557600080fd5b813581811115610ce757610ce7610c78565b8060051b604051601f19603f83011681018181108582111715610d0c57610d0c610c78565b604052918252848201925083810185019189831115610d2a57600080fd5b938501935b82851015610d4857843584529385019392850192610d2f565b8096505050505050509250929050565b80356001600160a01b038116811461076157600080fd5b60008060408385031215610d8257600080fd5b610d8b83610d58565b946020939093013593505050565b600060208284031215610dab57600080fd5b610db482610d58565b9392505050565b600060208284031215610dcd57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610e25578160001904821115610e0b57610e0b610dd4565b80851615610e1857918102915b93841c9390800290610def565b509250929050565b600082610e3c57506001610eca565b81610e4957506000610eca565b8160018114610e5f5760028114610e6957610e85565b6001915050610eca565b60ff841115610e7a57610e7a610dd4565b50506001821b610eca565b5060208310610133831016604e8410600b8410161715610ea8575081810a610eca565b610eb28383610dea565b8060001904821115610ec657610ec6610dd4565b0290505b92915050565b6000610db460ff841683610e2d565b634e487b7160e01b600052601260045260246000fd5b600082610f0457610f04610edf565b500490565b80820180821115610eca57610eca610dd4565b600060208284031215610f2e57600080fd5b81518015158114610db457600080fd5b600060018201610f5057610f50610dd4565b5060010190565b600060208284031215610f6957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600082610f9557610f95610edf565b500690565b600063ffffffff808316818103610fb357610fb3610dd4565b6001019392505050565b602080825282518282018190526000919060409081850190868401855b8281101561100857815180516001600160a01b03168552860151868501529284019290850190600101610fda565b509197965050505050505056fea2646970667358221220c5960e971f0b82bdd848cd9de7e57fec14f95f633dbb998de6f65dbbba09e13364736f6c63430008130033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdtTokenAddress: PromiseOrValue<string>,
    _maxPlayers: PromiseOrValue<BigNumberish>,
    _prizes: PromiseOrValue<BigNumberish>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    coordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lottery> {
    return super.deploy(
      _usdtTokenAddress,
      _maxPlayers,
      _prizes,
      subscriptionId,
      coordinator,
      keyHash,
      overrides || {}
    ) as Promise<Lottery>;
  }
  override getDeployTransaction(
    _usdtTokenAddress: PromiseOrValue<string>,
    _maxPlayers: PromiseOrValue<BigNumberish>,
    _prizes: PromiseOrValue<BigNumberish>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    coordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _usdtTokenAddress,
      _maxPlayers,
      _prizes,
      subscriptionId,
      coordinator,
      keyHash,
      overrides || {}
    );
  }
  override attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  override connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
