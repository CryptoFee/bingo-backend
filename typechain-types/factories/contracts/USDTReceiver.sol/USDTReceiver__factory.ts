/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  USDTReceiver,
  USDTReceiverInterface,
} from "../../../contracts/USDTReceiver.sol/USDTReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdtTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "USDTReceived",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "acceptUSDT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "usdtToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAllUSDT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawUSDT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610cdf380380610cdf8339818101604052810190610032919061011c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610149565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e9826100be565b9050919050565b6100f9816100de565b811461010457600080fd5b50565b600081519050610116816100f0565b92915050565b600060208284031215610132576101316100b9565b5b600061014084828501610107565b91505092915050565b610b87806101586000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063328fc4f8146100675780633ea521ef146100715780638da5cb5b1461008d57806398c77d1d146100ab578063a6f9dae1146100c7578063a98ad46c146100e3575b600080fd5b61006f610101565b005b61008b60048036038101906100869190610749565b610331565b005b6100956104c1565b6040516100a291906107b7565b60405180910390f35b6100c560048036038101906100c09190610749565b6104e5565b005b6100e160048036038101906100dc91906107fe565b610617565b005b6100eb6106e8565b6040516100f8919061088a565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018690610928565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101ec91906107b7565b602060405180830381865afa158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d919061095d565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016102ac929190610999565b6020604051808303816000875af11580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef91906109fa565b61032e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032590610a73565b60405180910390fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610928565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161043c929190610999565b6020604051808303816000875af115801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f91906109fa565b6104be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b590610a73565b60405180910390fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161054493929190610a93565b6020604051808303816000875af1158015610563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058791906109fa565b6105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610b16565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f2796405cc49bc8aca9149b78931c398159cef75486ac49c31c184dcbd7cea0558260405161060c9190610b36565b60405180910390a250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c90610928565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b6000819050919050565b61072681610713565b811461073157600080fd5b50565b6000813590506107438161071d565b92915050565b60006020828403121561075f5761075e61070e565b5b600061076d84828501610734565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107a182610776565b9050919050565b6107b181610796565b82525050565b60006020820190506107cc60008301846107a8565b92915050565b6107db81610796565b81146107e657600080fd5b50565b6000813590506107f8816107d2565b92915050565b6000602082840312156108145761081361070e565b5b6000610822848285016107e9565b91505092915050565b6000819050919050565b600061085061084b61084684610776565b61082b565b610776565b9050919050565b600061086282610835565b9050919050565b600061087482610857565b9050919050565b61088481610869565b82525050565b600060208201905061089f600083018461087b565b92915050565b600082825260208201905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c60008201527f20746869732066756e6374696f6e2e0000000000000000000000000000000000602082015250565b6000610912602f836108a5565b915061091d826108b6565b604082019050919050565b6000602082019050818103600083015261094181610905565b9050919050565b6000815190506109578161071d565b92915050565b6000602082840312156109735761097261070e565b5b600061098184828501610948565b91505092915050565b61099381610713565b82525050565b60006040820190506109ae60008301856107a8565b6109bb602083018461098a565b9392505050565b60008115159050919050565b6109d7816109c2565b81146109e257600080fd5b50565b6000815190506109f4816109ce565b92915050565b600060208284031215610a1057610a0f61070e565b5b6000610a1e848285016109e5565b91505092915050565b7f55534454207769746864726177616c206661696c65642e000000000000000000600082015250565b6000610a5d6017836108a5565b9150610a6882610a27565b602082019050919050565b60006020820190508181036000830152610a8c81610a50565b9050919050565b6000606082019050610aa860008301866107a8565b610ab560208301856107a8565b610ac2604083018461098a565b949350505050565b7f55534454207472616e73666572206661696c65642e0000000000000000000000600082015250565b6000610b006015836108a5565b9150610b0b82610aca565b602082019050919050565b60006020820190508181036000830152610b2f81610af3565b9050919050565b6000602082019050610b4b600083018461098a565b9291505056fea26469706673582212207195b2ae9ab8cae191a4e39fe5df6145e84630d070c206e5d70db9774b4d2ff664736f6c63430008120033";

type USDTReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: USDTReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class USDTReceiver__factory extends ContractFactory {
  constructor(...args: USDTReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdtTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<USDTReceiver> {
    return super.deploy(
      _usdtTokenAddress,
      overrides || {}
    ) as Promise<USDTReceiver>;
  }
  override getDeployTransaction(
    _usdtTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_usdtTokenAddress, overrides || {});
  }
  override attach(address: string): USDTReceiver {
    return super.attach(address) as USDTReceiver;
  }
  override connect(signer: Signer): USDTReceiver__factory {
    return super.connect(signer) as USDTReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USDTReceiverInterface {
    return new utils.Interface(_abi) as USDTReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): USDTReceiver {
    return new Contract(address, _abi, signerOrProvider) as USDTReceiver;
  }
}
