/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  GasTracker,
  GasTrackerInterface,
} from "../../contracts/GasTracker";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "tracker",
        type: "string",
      },
    ],
    name: "printGasUsage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tracker",
        type: "string",
      },
    ],
    name: "startTracking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610361806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631d2c9d541461003b5780631d74873814610050575b600080fd5b61004e6100493660046101b1565b610063565b005b61004e61005e3660046101b1565b6100bd565b6100ba816040518060400160405280600b81526020016a023b0b9903ab9b0b3b29d160ad1b8152505a60008560405161009c9190610286565b9081526020016040518091039020546100b591906102a2565b61012e565b50565b5a6000826040516100ce9190610286565b9081526020016040518091039020819055506100ba60405180604001604052806011815260200170023b0b9903634b6b4ba1029ba30b93a1d1607d1b8152508260008460405161011e9190610286565b9081526020016040518091039020545b610175838383604051602401610146939291906102f5565b60408051601f198184030181529190526020810180516001600160e01b0316635821efa160e01b17905261017a565b505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101c357600080fd5b813567ffffffffffffffff808211156101db57600080fd5b818401915084601f8301126101ef57600080fd5b8135818111156102015761020161019b565b604051601f8201601f19908116603f011681019083821181831017156102295761022961019b565b8160405282815287602084870101111561024257600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b8381101561027d578181015183820152602001610265565b50506000910152565b60008251610298818460208701610262565b9190910192915050565b818103818111156102c357634e487b7160e01b600052601160045260246000fd5b92915050565b600081518084526102e1816020860160208601610262565b601f01601f19169290920160200192915050565b60608152600061030860608301866102c9565b828103602084015261031a81866102c9565b91505082604083015294935050505056fea264697066735822122037560a3307a7d2f9bb5572bc3807c32a81b557b308214573cb112f1ed9d9c01b64736f6c63430008130033";

type GasTrackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasTrackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasTracker__factory extends ContractFactory {
  constructor(...args: GasTrackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GasTracker> {
    return super.deploy(overrides || {}) as Promise<GasTracker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GasTracker {
    return super.attach(address) as GasTracker;
  }
  override connect(signer: Signer): GasTracker__factory {
    return super.connect(signer) as GasTracker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasTrackerInterface {
    return new utils.Interface(_abi) as GasTrackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasTracker {
    return new Contract(address, _abi, signerOrProvider) as GasTracker;
  }
}
