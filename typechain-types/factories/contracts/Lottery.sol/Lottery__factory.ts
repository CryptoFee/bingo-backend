/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Lottery,
  LotteryInterface,
} from "../../../contracts/Lottery.sol/Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdtTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_maxAmount",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_prizes",
        type: "uint256[]",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "coordinator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "NewPlayer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ResetGame",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct Lottery.LuckyPlayer[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "Winners",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "buyLotteryTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLotteryDetails",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
        ],
        internalType: "struct Lottery.Player[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "playerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6101206040526007805461ff00191661010017905560006008556009805463ffffffff191660011790553480156200003657600080fd5b5060405162001844380380620018448339810160408190526200005991620002ba565b6001600160a01b0382166080528282823380600081620000c05760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000f357620000f3816200015d565b5050506001600160a01b0391821660a0526001600160401b039290921660c0526002919091553360e052600480546001600160a01b03191691881691909117905583516200014990600590602087019062000208565b5050506101009290925250620003d1915050565b336001600160a01b03821603620001b75760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000b7565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b82805482825590600052602060002090810192821562000246579160200282015b828111156200024657825182559160200191906001019062000229565b506200025492915062000258565b5090565b5b8082111562000254576000815560010162000259565b80516001600160a01b03811681146200028757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80516001600160401b03811681146200028757600080fd5b60008060008060008060c08789031215620002d457600080fd5b620002df876200026f565b60208881015160408a01519298509650906001600160401b03808211156200030657600080fd5b818a0191508a601f8301126200031b57600080fd5b8151818111156200033057620003306200028c565b8060051b604051601f19603f830116810181811085821117156200035857620003586200028c565b60405291825284820192508381018501918d8311156200037757600080fd5b938501935b8285101562000397578451845293850193928501926200037c565b809950505050505050620003ae60608801620002a2565b9250620003be608088016200026f565b915060a087015190509295509295509295565b60805160a05160c05160e0516101005161140b62000439600039600081816103560152818161069c0152610aad01526000818161029201528181610d45015261102201526000610870015260006108c10152600081816102030152610245015261140b6000f3fe6080604052600436106100745760003560e01c80636dc16a121161004e5780636dc16a12146100fa57806379ba50971461013f5780638da5cb5b14610154578063f2fde38b1461017c57610083565b80631fe543e31461008b57806327a360d1146100ab5780634f2f3519146100da57610083565b366100835761008161019c565b005b61008161019c565b34801561009757600080fd5b506100816100a636600461105f565b6101f8565b3480156100b757600080fd5b506100c0610280565b6040516100d1959493929190611164565b60405180910390f35b3480156100e657600080fd5b506100816100f536600461121d565b61043f565b34801561010657600080fd5b5061011a610115366004611247565b6106ec565b604080516001600160a01b0390941684526020840192909252908201526060016100d1565b34801561014b57600080fd5b50610081610738565b34801561016057600080fd5b506000546040516001600160a01b0390911681526020016100d1565b34801561018857600080fd5b5061008161019736600461126e565b6107e2565b60405162461bcd60e51b815260206004820152602660248201527f4e6f45746865723a20436f6e74726163742063616e6e6f7420726563656976656044820152651022ba3432b960d11b60648201526084015b60405180910390fd5b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102725760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044016101ef565b61027c82826107f6565b5050565b60006060808280336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103175760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e65722063616e207065726660448201526e37b936903a3434b99030b1ba34b7b760891b60648201526084016101ef565b60075460095463ffffffff166000818152600a60209081526040808320805482518185028101850190935280835261010090960460ff169590946005947f000000000000000000000000000000000000000000000000000000000000000094919392879290919084015b828210156103d6576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610381565b5050505093508280548060200260200160405190810160405280929190818152602001828054801561042757602002820191906000526020600020905b815481526020019060010190808311610413575b50505050509250945094509450945094509091929394565b60075460ff16156104845760405162461bcd60e51b815260206004820152600f60248201526e2932b2b73a3930b73a1031b0b6361760891b60448201526064016101ef565b6007805460ff191660019081179182905561010090910460ff161515146104ff5760405162461bcd60e51b815260206004820152602960248201527f57696e6e65727320617265206265696e672063616c63756c617465642e20506c60448201526819585cd9481dd85a5d60ba1b60648201526084016101ef565b600480546040516323b872dd60e01b81526001600160a01b0385811693820193909352306024820152604481018490529116906323b872dd906064016020604051808303816000875af115801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e9190611289565b6105c25760405162461bcd60e51b81526020600482015260156024820152742aa9a22a103a3930b739b332b9103330b4b632b21760591b60448201526064016101ef565b60095463ffffffff166000908152600a602090815260409182902082516060810184526001600160a01b0386168152600854928101839052909290919082019061060d9085906112c1565b905281546001808201845560009384526020808520845160039094020180546001600160a01b0319166001600160a01b03909416939093178355830151908201556040909101516002909101556008805483929061066c9084906112c1565b90915550506040517fe1ad53447c22d64aa0ff287e416c73bd87d0aeaaebb628bcb5b48d5ae215239290600090a17f0000000000000000000000000000000000000000000000000000000000000000600854106106de576005546106cf9061084d565b6006556007805461ff00191690555b50506007805460ff19169055565b600a602052816000526040600020818154811061070857600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116935090915083565b6001546001600160a01b0316331461078b5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016101ef565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6107ea610935565b6107f38161098a565b50565b816006541461083c5760405162461bcd60e51b815260206004820152601260248201527172657175657374206e6f7420666f756e642160701b60448201526064016101ef565b61084581610a33565b61027c610e16565b6002546040516305d3b1d360e41b8152600481019190915267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263017d7840606482015263ffffffff8216608482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af115801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e91906112da565b9392505050565b6000546001600160a01b031633146109885760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016101ef565b565b336001600160a01b038216036109e25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016101ef565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000815167ffffffffffffffff811115610a4f57610a4f611049565b604051908082528060200260200182016040528015610a9457816020015b6040805180820190915260008082526020820152815260200190600190039081610a6d5790505b50905060005b82518163ffffffff161015610c805760007f0000000000000000000000000000000000000000000000000000000000000000848363ffffffff1681518110610ae457610ae46112f3565b6020026020010151610af6919061131f565b610b019060016112c1565b90506000610b148263ffffffff16610e8b565b600454600580549293506001600160a01b039091169163a9059cbb91849163ffffffff8816908110610b4857610b486112f3565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc39190611289565b610c075760405162461bcd60e51b81526020600482015260156024820152742aa9a22a103a3930b739b332b9103330b4b632b21760591b60448201526064016101ef565b6040518060400160405280826001600160a01b0316815260200160058563ffffffff1681548110610c3a57610c3a6112f3565b9060005260206000200154815250848463ffffffff1681518110610c6057610c606112f3565b602002602001018190525050508080610c7890611333565b915050610a9a565b507f91bc3922e592c1a361b69a1521df2f97ca2f5b15db407fe1f90a8c95bf7738b681604051610cb09190611356565b60405180910390a1600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2a91906112da565b6004805460405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169382019390935260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190611289565b610e115760405162461bcd60e51b815260206004820152601e60248201527f55534454207472616e7366657220746f206f776e6572206661696c65642e000060448201526064016101ef565b505050565b6000600881905560068190556009805463ffffffff1691610e3683611333565b825463ffffffff91821661010093840a90810292021916179091556007805461ff0019169091179055506040517fc41db7bf93b2ffacecac5d21bb880bf7435f8e756b583a2434d667ebd52516d690600090a1565b60095463ffffffff166000908152600a60209081526040808320805482518185028101850190935280835284938493929190849084015b82821015610f17576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610ec2565b505050509050600060018251610f2d91906113ae565b90505b80831161101f5760006002610f4583866112c1565b610f509060016112c1565b610f5a91906113c1565b9050828181518110610f6e57610f6e6112f3565b6020026020010151602001518610158015610fa65750828181518110610f9657610f966112f3565b6020026020010151604001518611155b15610fd457828181518110610fbd57610fbd6112f3565b602002602001015160000151945050505050919050565b828181518110610fe657610fe66112f3565b60200260200101516020015186101561100b576110046001826113ae565b9150611019565b6110168160016112c1565b93505b50610f30565b507f0000000000000000000000000000000000000000000000000000000000000000949350505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561107257600080fd5b8235915060208084013567ffffffffffffffff8082111561109257600080fd5b818601915086601f8301126110a657600080fd5b8135818111156110b8576110b8611049565b8060051b604051601f19603f830116810181811085821117156110dd576110dd611049565b6040529182528482019250838101850191898311156110fb57600080fd5b938501935b8285101561111957843584529385019392850192611100565b8096505050505050509250929050565b600081518084526020808501945080840160005b838110156111595781518752958201959082019060010161113d565b509495945050505050565b600060a082018715158352602060a08185015281885180845260c086019150828a01935060005b818110156111c657845180516001600160a01b031684528481015185850152604090810151908401529383019360609092019160010161118b565b505084810360408601526111da8189611129565b93505050508360608301526111f7608083018463ffffffff169052565b9695505050505050565b80356001600160a01b038116811461121857600080fd5b919050565b6000806040838503121561123057600080fd5b61123983611201565b946020939093013593505050565b6000806040838503121561125a57600080fd5b823563ffffffff8116811461123957600080fd5b60006020828403121561128057600080fd5b61092e82611201565b60006020828403121561129b57600080fd5b8151801515811461092e57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156112d4576112d46112ab565b92915050565b6000602082840312156112ec57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261132e5761132e611309565b500690565b600063ffffffff80831681810361134c5761134c6112ab565b6001019392505050565b602080825282518282018190526000919060409081850190868401855b828110156113a157815180516001600160a01b03168552860151868501529284019290850190600101611373565b5091979650505050505050565b818103818111156112d4576112d46112ab565b6000826113d0576113d0611309565b50049056fea2646970667358221220344fbafd3b14a411fcd91700bffae40d99ff09f36de4630642593314f14ecaf264736f6c63430008130033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdtTokenAddress: PromiseOrValue<string>,
    _maxAmount: PromiseOrValue<BigNumberish>,
    _prizes: PromiseOrValue<BigNumberish>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    coordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lottery> {
    return super.deploy(
      _usdtTokenAddress,
      _maxAmount,
      _prizes,
      subscriptionId,
      coordinator,
      keyHash,
      overrides || {}
    ) as Promise<Lottery>;
  }
  override getDeployTransaction(
    _usdtTokenAddress: PromiseOrValue<string>,
    _maxAmount: PromiseOrValue<BigNumberish>,
    _prizes: PromiseOrValue<BigNumberish>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    coordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _usdtTokenAddress,
      _maxAmount,
      _prizes,
      subscriptionId,
      coordinator,
      keyHash,
      overrides || {}
    );
  }
  override attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  override connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
