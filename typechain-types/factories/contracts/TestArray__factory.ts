/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TestArray, TestArrayInterface } from "../../contracts/TestArray";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "Winners",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
        ],
        internalType: "struct TestArray.Player[]",
        name: "playersData",
        type: "tuple[]",
      },
    ],
    name: "addPlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_randomWords",
        type: "uint256[]",
      },
    ],
    name: "receivePlayersAndPickWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526001805463ffffffff19168117905534801561001f57600080fd5b506106a38061002f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a339cc01461003b57806360f2eec414610050575b600080fd5b61004e61004936600461044a565b610063565b005b61004e61005e3660046104bf565b610153565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b54620f424010156100d75760405162461bcd60e51b815260206004820152601060248201526f08adcdeeaced040d2e640cadcdeeaced60831b604482015260640160405180910390fd5b60005b8181101561014e5760015463ffffffff16600090815260026020526040902083838381811061010b5761010b610522565b8354600181018555600094855260209094206060909102929092019260030290910190506101398282610538565b505080806101469061058e565b9150506100da565b505050565b60005b63ffffffff81168211156101f9576000620f424084848463ffffffff1681811061018257610182610522565b9050602002013561019391906105bd565b61019e9060016105d1565b905060006101e2620f424086868663ffffffff168181106101c1576101c1610522565b905060200201356101d291906105bd565b6101dd9060016105d1565b610242565b9050505080806101f1906105ea565b915050610156565b5047610204816103e1565b7fd1cec1f24bf37e0af1d9805fe1dd41465a0b186aa2a97b1320db620a4e197bf9838360405161023592919061060d565b60405180910390a1505050565b6001805463ffffffff1660009081526002602052604081205490918291829161026a91610646565b90505b8082116103d8576000600261028283856105d1565b61028d9060016105d1565b6102979190610659565b60015463ffffffff166000908152600260205260409020805491925090829081106102c4576102c4610522565b906000526020600020906003020160010154851015801561031f575060015463ffffffff16600090815260026020526040902080548290811061030957610309610522565b9060005260206000209060030201600201548511155b156103705760015463ffffffff16600090815260026020526040902080548290811061034d5761034d610522565b60009182526020909120600390910201546001600160a01b031695945050505050565b60015463ffffffff16600090815260026020526040902080548290811061039957610399610522565b9060005260206000209060030201600101548510156103c4576103bd600182610646565b91506103d2565b6103cf8160016105d1565b92505b5061026d565b50309392505050565b610426816040516024016103f791815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b179052610429565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000806020838503121561045d57600080fd5b823567ffffffffffffffff8082111561047557600080fd5b818501915085601f83011261048957600080fd5b81358181111561049857600080fd5b8660206060830285010111156104ad57600080fd5b60209290920196919550909350505050565b600080602083850312156104d257600080fd5b823567ffffffffffffffff808211156104ea57600080fd5b818501915085601f8301126104fe57600080fd5b81358181111561050d57600080fd5b8660208260051b85010111156104ad57600080fd5b634e487b7160e01b600052603260045260246000fd5b81356001600160a01b03811680821461055057600080fd5b82546001600160a01b0319161782555060208201356001820155604090910135600290910155565b634e487b7160e01b600052601160045260246000fd5b6000600182016105a0576105a0610578565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826105cc576105cc6105a7565b500690565b808201808211156105e4576105e4610578565b92915050565b600063ffffffff80831681810361060357610603610578565b6001019392505050565b6020808252810182905260006001600160fb1b0383111561062d57600080fd5b8260051b80856040850137919091016040019392505050565b818103818111156105e4576105e4610578565b600082610668576106686105a7565b50049056fea2646970667358221220b634715400123faa1d699fc4a90e4abf066b12fc5f81b6ad817948912a70e99964736f6c63430008130033";

type TestArrayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestArrayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestArray__factory extends ContractFactory {
  constructor(...args: TestArrayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestArray> {
    return super.deploy(overrides || {}) as Promise<TestArray>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestArray {
    return super.attach(address) as TestArray;
  }
  override connect(signer: Signer): TestArray__factory {
    return super.connect(signer) as TestArray__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestArrayInterface {
    return new utils.Interface(_abi) as TestArrayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestArray {
    return new Contract(address, _abi, signerOrProvider) as TestArray;
  }
}
