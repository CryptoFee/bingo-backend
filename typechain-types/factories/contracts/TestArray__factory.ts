/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TestArray, TestArrayInterface } from "../../contracts/TestArray";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct TestArray.LuckyPlayer[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "Winners",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
        ],
        internalType: "struct TestArray.Player[]",
        name: "playersData",
        type: "tuple[]",
      },
    ],
    name: "addPlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_randomWords",
        type: "uint256[]",
      },
    ],
    name: "receivePlayersAndPickWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526001805463ffffffff191681179055600060025534801561002457600080fd5b5061075f806100346000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a339cc01461003b57806360f2eec414610050575b600080fd5b61004e6100493660046104d1565b610063565b005b61004e61005e366004610546565b610177565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff54620f424010156100d75760405162461bcd60e51b815260206004820152601060248201526f08adcdeeaced040d2e640cadcdeeaced60831b604482015260640160405180910390fd5b60005b8181101561014e5760015463ffffffff16600090815260036020526040902083838381811061010b5761010b6105a9565b83546001810185556000948552602090942060609091029290920192600302909101905061013982826105bf565b5050808061014690610615565b9150506100da565b50600160026000828254610162919061062e565b9091555050600254610173906102c9565b5050565b60008167ffffffffffffffff81111561019257610192610647565b6040519080825280602002602001820160405280156101d757816020015b60408051808201909152600080825260208201528152602001906001900390816101b05790505b50905060005b63ffffffff811683111561028c576000620f424085858463ffffffff16818110610209576102096105a9565b9050602002013561021a9190610673565b61022590600161062e565b9050600061023282610311565b90506040518060400160405280826001600160a01b03168152602001612710815250848463ffffffff168151811061026c5761026c6105a9565b60200260200101819052505050808061028490610687565b9150506101dd565b507f91bc3922e592c1a361b69a1521df2f97ca2f5b15db407fe1f90a8c95bf7738b6816040516102bc91906106aa565b60405180910390a1505050565b61030e816040516024016102df91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b1790526104b0565b50565b6001805463ffffffff1660009081526003602052604081205490918291829161033991610702565b90505b8082116104a75760006002610351838561062e565b61035c90600161062e565b6103669190610715565b60015463ffffffff16600090815260036020526040902080549192509082908110610393576103936105a9565b90600052602060002090600302016001015485101580156103ee575060015463ffffffff1660009081526003602052604090208054829081106103d8576103d86105a9565b9060005260206000209060030201600201548511155b1561043f5760015463ffffffff16600090815260036020526040902080548290811061041c5761041c6105a9565b60009182526020909120600390910201546001600160a01b031695945050505050565b60015463ffffffff166000908152600360205260409020805482908110610468576104686105a9565b9060005260206000209060030201600101548510156104935761048c600182610702565b91506104a1565b61049e81600161062e565b92505b5061033c565b50309392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080602083850312156104e457600080fd5b823567ffffffffffffffff808211156104fc57600080fd5b818501915085601f83011261051057600080fd5b81358181111561051f57600080fd5b86602060608302850101111561053457600080fd5b60209290920196919550909350505050565b6000806020838503121561055957600080fd5b823567ffffffffffffffff8082111561057157600080fd5b818501915085601f83011261058557600080fd5b81358181111561059457600080fd5b8660208260051b850101111561053457600080fd5b634e487b7160e01b600052603260045260246000fd5b81356001600160a01b0381168082146105d757600080fd5b82546001600160a01b0319161782555060208201356001820155604090910135600290910155565b634e487b7160e01b600052601160045260246000fd5b600060018201610627576106276105ff565b5060010190565b80820180821115610641576106416105ff565b92915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000826106825761068261065d565b500690565b600063ffffffff8083168181036106a0576106a06105ff565b6001019392505050565b602080825282518282018190526000919060409081850190868401855b828110156106f557815180516001600160a01b031685528601518685015292840192908501906001016106c7565b5091979650505050505050565b81810381811115610641576106416105ff565b6000826107245761072461065d565b50049056fea2646970667358221220adab2cf5adea8fe317768fe327ae1aed05253e2ad1cb8631208f74bfb983ddd564736f6c63430008130033";

type TestArrayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestArrayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestArray__factory extends ContractFactory {
  constructor(...args: TestArrayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestArray> {
    return super.deploy(overrides || {}) as Promise<TestArray>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestArray {
    return super.attach(address) as TestArray;
  }
  override connect(signer: Signer): TestArray__factory {
    return super.connect(signer) as TestArray__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestArrayInterface {
    return new utils.Interface(_abi) as TestArrayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestArray {
    return new Contract(address, _abi, signerOrProvider) as TestArray;
  }
}
