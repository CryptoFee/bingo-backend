/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TestArray, TestArrayInterface } from "../../contracts/TestArray";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
        ],
        internalType: "struct TestArray.Player",
        name: "player",
        type: "tuple",
      },
    ],
    name: "addPlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deletePlayers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b506105ae806100256000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806360046f6e1461003b57806377cff0f114610050575b600080fd5b61004e610049366004610418565b610058565b005b61004e6101c0565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b54620f424010156100cc5760405162461bcd60e51b815260206004820152601060248201526f08adcdeeaced040d2e640cadcdeeaced60831b604482015260640160405180910390fd5b600260209081527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b805460018082018355600092835284517f7d2944a272ac5bae96b5bd2f67b6c13276d541dc09eb1cf414d96b19a09e1c2f600390930292830180546001600160a01b0319166001600160a01b03909216919091179055928401517f7d2944a272ac5bae96b5bd2f67b6c13276d541dc09eb1cf414d96b19a09e1c3082015560408401517f7d2944a272ac5bae96b5bd2f67b6c13276d541dc09eb1cf414d96b19a09e1c319091015581548291906101ac9083906104aa565b90915550506001546101bd90610253565b50565b6101ee6040518060400160405280600d81526020016c64656c657465506c617965727360981b815250610298565b60008080526002602052610223907fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b906103cb565b6102516040518060400160405280600d81526020016c64656c657465506c617965727360981b815250610307565b565b6101bd8160405160240161026991815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b17905261035e565b5a6000826040516102a991906104e7565b9081526020016040518091039020819055506101bd816040518060400160405280600b81526020016a023b0b9903634b6b4ba1d160ad1b8152506000846040516102f391906104e7565b90815260200160405180910390205461037f565b6101bd816040518060400160405280600b81526020016a023b0b9903ab9b0b3b29d160ad1b8152505a60008560405161034091906104e7565b9081526020016040518091039020546103599190610503565b61037f565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6103c683838360405160240161039793929190610542565b60408051601f198184030181529190526020810180516001600160e01b0316635821efa160e01b17905261035e565b505050565b50805460008255600302906000526020600020908101906101bd91905b808211156104145780546001600160a01b031916815560006001820181905560028201556003016103e8565b5090565b60006060828403121561042a57600080fd5b6040516060810181811067ffffffffffffffff8211171561045b57634e487b7160e01b600052604160045260246000fd5b60405282356001600160a01b038116811461047557600080fd5b8152602083810135908201526040928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104bd576104bd610494565b92915050565b60005b838110156104de5781810151838201526020016104c6565b50506000910152565b600082516104f98184602087016104c3565b9190910192915050565b818103818111156104bd576104bd610494565b6000815180845261052e8160208601602086016104c3565b601f01601f19169290920160200192915050565b6060815260006105556060830186610516565b82810360208401526105678186610516565b91505082604083015294935050505056fea2646970667358221220a8ef0b79f7e82256130ce8259f5b5e66fd1251e7ef70bd28c10676374c11573f64736f6c63430008130033";

type TestArrayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestArrayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestArray__factory extends ContractFactory {
  constructor(...args: TestArrayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestArray> {
    return super.deploy(overrides || {}) as Promise<TestArray>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestArray {
    return super.attach(address) as TestArray;
  }
  override connect(signer: Signer): TestArray__factory {
    return super.connect(signer) as TestArray__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestArrayInterface {
    return new utils.Interface(_abi) as TestArrayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestArray {
    return new Contract(address, _abi, signerOrProvider) as TestArray;
  }
}
