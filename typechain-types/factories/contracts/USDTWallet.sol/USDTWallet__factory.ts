/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  USDTWallet,
  USDTWalletInterface,
} from "../../../contracts/USDTWallet.sol/USDTWallet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdtAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositUSDT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "usdtAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawUSDT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161091c38038061091c8339818101604052810190610032919061011c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610149565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e9826100be565b9050919050565b6100f9816100de565b811461010457600080fd5b50565b600081519050610116816100f0565b92915050565b600060208284031215610132576101316100b9565b5b600061014084828501610107565b91505092915050565b6107c4806101586000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631481794e146100515780638da5cb5b1461006d5780639ab4a4451461008b578063e7c80f17146100a9575b600080fd5b61006b600480360381019061006691906104c3565b6100c5565b005b6100756102f8565b6040516100829190610512565b60405180910390f35b61009361031c565b6040516100a09190610512565b60405180910390f35b6100c360048036038101906100be919061052d565b610342565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a906105b7565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050818173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101b49190610512565b602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f591906105ec565b1015610236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022d90610665565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610271929190610694565b6020604051808303816000875af1158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b491906106f5565b6102f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea9061076e565b60405180910390fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30846040518363ffffffff1660e01b81526004016103a4929190610694565b6020604051808303816000875af11580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e791906106f5565b610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d9061076e565b60405180910390fd5b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061045a8261042f565b9050919050565b61046a8161044f565b811461047557600080fd5b50565b60008135905061048781610461565b92915050565b6000819050919050565b6104a08161048d565b81146104ab57600080fd5b50565b6000813590506104bd81610497565b92915050565b600080604083850312156104da576104d961042a565b5b60006104e885828601610478565b92505060206104f9858286016104ae565b9150509250929050565b61050c8161044f565b82525050565b60006020820190506105276000830184610503565b92915050565b6000602082840312156105435761054261042a565b5b6000610551848285016104ae565b91505092915050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2077697468647261772055534454600082015250565b60006105a160208361055a565b91506105ac8261056b565b602082019050919050565b600060208201905081810360008301526105d081610594565b9050919050565b6000815190506105e681610497565b92915050565b6000602082840312156106025761060161042a565b5b6000610610848285016105d7565b91505092915050565b7f496e73756666696369656e7420555344542062616c616e636500000000000000600082015250565b600061064f60198361055a565b915061065a82610619565b602082019050919050565b6000602082019050818103600083015261067e81610642565b9050919050565b61068e8161048d565b82525050565b60006040820190506106a96000830185610503565b6106b66020830184610685565b9392505050565b60008115159050919050565b6106d2816106bd565b81146106dd57600080fd5b50565b6000815190506106ef816106c9565b92915050565b60006020828403121561070b5761070a61042a565b5b6000610719848285016106e0565b91505092915050565b7f55534454207472616e73666572206661696c6564000000000000000000000000600082015250565b600061075860148361055a565b915061076382610722565b602082019050919050565b600060208201905081810360008301526107878161074b565b905091905056fea2646970667358221220a3cb84a5ca7d7ef2e7b42a6f7477d35a4387cc6d5128222bbf6ca397cb50c7e064736f6c63430008120033";

type USDTWalletConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: USDTWalletConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class USDTWallet__factory extends ContractFactory {
  constructor(...args: USDTWalletConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdtAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<USDTWallet> {
    return super.deploy(_usdtAddress, overrides || {}) as Promise<USDTWallet>;
  }
  override getDeployTransaction(
    _usdtAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_usdtAddress, overrides || {});
  }
  override attach(address: string): USDTWallet {
    return super.attach(address) as USDTWallet;
  }
  override connect(signer: Signer): USDTWallet__factory {
    return super.connect(signer) as USDTWallet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USDTWalletInterface {
    return new utils.Interface(_abi) as USDTWalletInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): USDTWallet {
    return new Contract(address, _abi, signerOrProvider) as USDTWallet;
  }
}
