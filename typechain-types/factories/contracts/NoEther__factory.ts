/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { NoEther, NoEtherInterface } from "../../contracts/NoEther";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a480601d6000396000f3fe608060405236601057600e6013565b005b600e5b60405162461bcd60e51b815260206004820152602660248201527f4e6f45746865723a20436f6e74726163742063616e6e6f7420726563656976656044820152651022ba3432b960d11b606482015260840160405180910390fdfea2646970667358221220662a0f0fc09e22a4818ec5abf9ae26bfc51313f3739bd81549cb0b1fac4976fc64736f6c63430008130033";

type NoEtherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NoEtherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NoEther__factory extends ContractFactory {
  constructor(...args: NoEtherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NoEther> {
    return super.deploy(overrides || {}) as Promise<NoEther>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NoEther {
    return super.attach(address) as NoEther;
  }
  override connect(signer: Signer): NoEther__factory {
    return super.connect(signer) as NoEther__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NoEtherInterface {
    return new utils.Interface(_abi) as NoEtherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NoEther {
    return new Contract(address, _abi, signerOrProvider) as NoEther;
  }
}
